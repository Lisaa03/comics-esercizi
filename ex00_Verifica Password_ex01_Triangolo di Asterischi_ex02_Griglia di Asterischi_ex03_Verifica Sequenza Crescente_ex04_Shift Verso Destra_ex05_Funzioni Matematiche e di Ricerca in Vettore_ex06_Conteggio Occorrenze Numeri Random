using static System.Runtime.InteropServices.JavaScript.JSType;

ex00_Verifica Password
Scrivi un programma che: Abbia una password segreta memorizzata in una variabile.
Chieda all'utente di inserire la password.
Continui a chiedere la password finché non è corretta (uguale alla password segreta).
Se la password è errata, scriva "Mi dispiace la password è sbagliata! Riprova...".
Se la password è corretta, scriva "Complimenti la password è corretta!"
Se si supera il massimo numero di tentativi, il programma esce con il messaggio di errore "Mi dispiace hai esaurito i tentativi!".

using System;

class Program
{
    static void Main()
    {
        // Memorizza la password segreta
        string passwordSegreta = "password123";
        int tentativiMassimi = 5;
        int tentativi = 0;
        bool passwordCorretta = false;

        // Ciclo che continua a chiedere la password finché non è corretta o si superano i tentativi massimi
        while (tentativi < tentativiMassimi && !passwordCorretta)
        {
            // Chiedi all'utente di inserire la password
            Console.Write("Inserisci la password: ");
            string input = Console.ReadLine();

            // Verifica se la password è corretta
            passwordCorretta = input == passwordSegreta;

            // Se la password è errata
            if (!passwordCorretta)
            {
                Console.WriteLine("Mi dispiace la password è sbagliata! Riprova...");
                tentativi++;
            }
        }

        // Verifica se la password è corretta e se si sono superati i tentativi massimi
        if (passwordCorretta)
        {
            Console.WriteLine("Complimenti la password è corretta!");
        }
        else
        {
            Console.WriteLine("Mi dispiace hai esaurito i tentativi!");
        }
    }
}

ex01_Triangolo di Asterischi
Scrivi un programma che:
Chieda all'utente di inserire un valore di lunghezza.
Disegni un triangolo di asterischi sulla base della lunghezza inserita.


using System;

class Program
{
    static void Main()
    {
        // Chiedi all'utente di inserire la lunghezza del triangolo
        Console.Write("Inserisci la lunghezza del triangolo: ");
        int lunghezza = int.Parse(Console.ReadLine());

        // Disegna il triangolo di asterischi
        for (int i = 1; i <= lunghezza; i++)
        {
            for (int j = 0; j < i; j++)
            {
                Console.Write("*");
            }
            Console.WriteLine();
        }
    }
}



ex02_Griglia di Asterischi
Descrizione dell'Esercizio:
Scrivi un programma che:

Chieda all'utente di inserire un valore di larghezza e uno di altezza.
Disegni una griglia di asterischi delle dimensioni inserite.

using System;

class Program
{
    static void Main()
    {
        // Chiedi all'utente di inserire la larghezza della griglia
        Console.Write("Inserisci la larghezza della griglia: ");
        int larghezza = int.Parse(Console.ReadLine());

        // Chiedi all'utente di inserire l'altezza della griglia
        Console.Write("Inserisci l'altezza della griglia: ");
        int altezza = int.Parse(Console.ReadLine());

        // Disegna la griglia di asterischi
        for (int i = 0; i < altezza; i++)
        {
            for (int j = 0; j < larghezza; j++)
            {
                Console.Write("*");
            }
            Console.Write



ex03_Verifica Sequenza Crescente
Descrizione dell'Esercizio:
Scrivi un programma che accetti in input una sequenza di numeri interi. Gli utenti devono specificare la lunghezza della sequenza(N) e inserire successivamente N numeri interi, memorizzati in un vettore.

Dopo l'inserimento della sequenza, il programma tramite la funzione:

  bool findIcreasingSubsequance(/*args*/)
La funzione prende come argomento la sequenza e ritorna un booleano(vero se il vettore contiene una sequenza di numeri ordinata in modo strettamente crescente e falso se non la contiene).

Il programma dovrebbe quindi comunicare all'utente se la sequenza è strettamente crescente o meno.


using System;

class Program
{
    static void Main()
    {
        // Chiedi all'utente di inserire la lunghezza della sequenza
        Console.Write("Inserisci la lunghezza della sequenza (N): ");
        int N = int.Parse(Console.ReadLine());

        // Dichiarazione dell'array per memorizzare la sequenza
        int[] sequenza = new int[N];

        // Chiedi all'utente di inserire i numeri nella sequenza
        Console.WriteLine($"Inserisci {N} numeri interi:");
        for (int i = 0; i < N; i++)
        {
            Console.Write($"Numero {i + 1}: ");
            sequenza[i] = int.Parse(Console.ReadLine());
        }

        // Verifica se la sequenza è strettamente crescente
        bool isIncreasing = Find(sequenza);

        // Comunica all'utente il risultato
        if (isIncreasing)
        {
            Console.WriteLine("La sequenza è strettamente crescente.");
        }
        else
        {
            Console.WriteLine("La sequenza non è strettamente crescente.");
        }
    }

    static bool Find(int[] sequenza)
    {
        // Controlla se la sequenza è strettamente crescente
        for (int i = 1; i < sequenza.Length; i++)
        {
            if (sequenza[i] <= sequenza[i - 1])
            {
                return false;
            }
        }
        return true;
    }
}


ex04_Shift Verso Destra
Descrizione dell'Esercizio:
Scrivi un programma che riceve in ingresso una sequenza di N numeri interi.Gli utenti devono specificare la lunghezza della sequenza(N) e inserire 
successivamente N numeri interi, memorizzati in un vettore.
Dopo l'inserimento della sequenza, il programma deve eseguire lo shift del vettore verso destra. Ad esempio, se il vettore è [1, 18, 42, 5, 7], dopo lo shift diventa [7, 1, 18, 42, 5].
Il programma dovrebbe comunicare all'utente il risultato dello shift e successivamente chiedere all'utente un numero intero.


using System;

class Program
{
    static void Main()
    {
        // Chiedi all'utente di inserire la lunghezza della sequenza
        Console.Write("Inserisci la lunghezza della sequenza (N): ");
        int N = int.Parse(Console.ReadLine());

        // Dichiarazione dell'array per memorizzare la sequenza
        int[] sequenza = new int[N];

        // Chiedi all'utente di inserire i numeri nella sequenza
        Console.WriteLine($"Inserisci {N} numeri interi:");
        for (int i = 0; i < N; i++)
        {
            Console.Write($"Numero {i + 1}: ");
            sequenza[i] = int.Parse(Console.ReadLine());
        }

        // Esegui lo shift del vettore verso destra
        int[] sequenzaShiftata = ShiftRight(sequenza);

        // Comunica all'utente il risultato dello shift
        Console.WriteLine("La sequenza dopo lo shift a destra è:");
        foreach (int num in sequenzaShiftata)
        {
            Console.Write(num + " ");
        }
        Console.WriteLine();

        // Chiedi all'utente di inserire un numero intero
        Console.Write("Inserisci un numero intero: ");
        int numeroUtente = int.Parse(Console.ReadLine());

        // Stampa il numero inserito dall'utente
        Console.WriteLine($"Hai inserito il numero: {numeroUtente}");
    }

    static int[] ShiftRight(int[] sequenza)
    {
        int N = sequenza.Length;
        int[] sequenzaShiftata = new int[N];

        // Esegui lo shift del vettore verso destra
        sequenzaShiftata[0] = sequenza[N - 1];
        for (int i = 1; i < N; i++)
        {
            sequenzaShiftata[i] = sequenza[i - 1];
        }

        return sequenzaShiftata;
    }
}


ex05_Funzioni Matematiche e di Ricerca in Vettore

descrizione dell'Esercizio:
Scrivi un programma che includa le seguenti funzioni matematiche e di ricerca:
Funzione per il Doppio:
int CalcolaDoppio(int numero)
La funzione prende un valore intero come argomento e restituisce il suo doppio.
Funzione per il Prodotto:
int CalcolaProdotto(int a, int b)
La funzione prende due valori interi come argomenti e restituisce il loro prodotto.
Funzione per la Somma degli Elementi in un Vettore:
int SommaElementiVettore(int[] vettore)
La funzione prende un vettore di interi come argomento e restituisce la somma di tutti gli elementi nel vettore.
Funzione per il Massimo tra Due Numeri:
int TrovaMassimo(int a, int b)
La funzione prende due valori interi come argomenti e restituisce il maggiore tra i due.
Funzione per Verificare la Presenza in un Vettore:
bool VerificaPresenza(int[] vettore, int numero)
La funzione prende un vettore di interi e un numero come argomenti e restituisce true se il numero è presente nel vettore, altrimenti restituisce false.
Dopo aver definito queste funzioni, esegui ciascuna nel Main e stampa i risultati.


using System;

class Program
{
    static void Main()
    {
        // Esegui le funzioni e stampa i risultati
        int numero = 5;
        Console.WriteLine($"Il doppio di {numero} è: {CalcolaDoppio(numero)}");

        int prodotto = CalcolaProdotto(3, 7);
        Console.WriteLine($"Il prodotto di 3 e 7 è: {prodotto}");

        int[] vettore = { 1, 2, 3, 4, 5 };
        Console.WriteLine($"La somma degli elementi nel vettore è: {SommaElementiVettore(vettore)}");

        int max = TrovaMassimo(10, 8);
        Console.WriteLine($"Il massimo tra 10 e 8 è: {max}");

        int numeroDaCercare = 3;
        bool presente = VerificaPresenza(vettore, numeroDaCercare);
        Console.WriteLine($"Il numero {numeroDaCercare} è presente nel vettore? {presente}");
    }

    static int CalcolaDoppio(int numero)
    {
        return numero * 2;
    }

    static int CalcolaProdotto(int a, int b)
    {
        return a * b;
    }

    static int SommaElementiVettore(int[] vettore)
    {
        int somma = 0;
        foreach (int elemento in vettore)
        {
            somma += elemento;
        }
        return somma;
    }

    static int TrovaMassimo(int a, int b)
    {
        return Math.Max(a, b);
    }

    static bool VerificaPresenza(int[] vettore, int numero)
    {
        foreach (int elemento in vettore)
        {
            if (elemento == numero)
            {
                return true;
            }
        }
        return false;
    }
}



ex06_Conteggio Occorrenze Numeri Random

Scrivi un programma che:
Chieda all'utente di inserire la lunghezza di un vettore.
Riempia il vettore con numeri casuali compresi tra 0 e 9.
Conti le occorrenze di ogni numero generato e stampi il conteggio.
Permetta all'utente di scegliere se generare nuovi numeri e sommare i loro conteggi ai precedenti o uscire dal programma.
Il programma non termina fino a quando l'utente non dà il comando di uscita.
Per generare i numeri casuali, utilizza la classe Random di C#.


    using System;

class Program
{
    static void Main()
    {
        Random rand = new Random();
        int[] conteggioNumeri = new int[10];

        while (true)
        {
            // Chiedi all'utente di inserire la lunghezza del vettore
            Console.Write("Inserisci la lunghezza del vettore: ");
            int lunghezza = int.Parse(Console.ReadLine());

            // Riempi il vettore con numeri casuali compresi tra 0 e 9
            int[] vettore = new int[lunghezza];
            for (int i = 0; i < lunghezza; i++)
            {
                vettore[i] = rand.Next(10);
            }

            // Conta le occorrenze di ogni numero generato e stampa il conteggio
            foreach (int numero in vettore)
            {
                conteggioNumeri[numero]++;
            }

            // Stampa il conteggio di ogni numero
            Console.WriteLine("Conteggio dei numeri generati:");
            for (int i = 0; i < 10; i++)
            {
                Console.WriteLine($"Numero {i}: {conteggioNumeri[i]}");
            }

            // Chiedi all'utente se desidera generare nuovi numeri e sommare i conteggi
            Console.Write("Vuoi generare nuovi numeri e sommare i conteggi? (sì/no): ");
            string risposta = Console.ReadLine().ToLower();

            if (risposta != "sì")
            {
                break; // Esci dal ciclo se l'utente non vuole generare nuovi numeri
            }
        }
    }
}
